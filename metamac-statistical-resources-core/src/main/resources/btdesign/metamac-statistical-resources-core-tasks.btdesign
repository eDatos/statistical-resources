import "classpath:/btdesign/metamac-statistical-resources-core-tasks-dtos.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-tasks-enums.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-datasets.btdesign"

Application DatasetsStatisticalResources { 
	basePackage=unused

	Module stat_resource_tasks {
		basePackage=org.siemac.metamac.statistical.resources.core.task

		// ----------------------------------------------------------------
		// 							SERVICES
		// ----------------------------------------------------------------
		
		"Provides access to import data operations"
		Service TaskServiceFacade {
			
			"Perform the importation task"
    		executeImportationTask(String importationJobKey, @TaskInfoDataset taskInfoDataset) throws MetamacException;
    		"Perform the receovery importation task"
    		executeRecoveryImportationTask(String recoveryJobKey, @TaskInfoDataset taskInfoDataset) throws MetamacException; 
    		"Perform the duplication task"
    		executeDuplicationTask(String duplicationJobKey, @TaskInfoDataset taskInfoDataset, String newDatasetId) throws MetamacException; 

    		// General JOBS
    		markTaskAsFailed(String job, java.lang.Exception exception) throws MetamacException;
    		markAllInProgressTaskToFailed() throws MetamacException;
		}
		
		"Provides access to import data operations"
		Service TaskService {
			> @TaskRepository
			> @DatasetService
			
			"Plannify a scheduled task to import"
			String planifyImportationDataset(@TaskInfoDataset taskInfoDataset) throws MetamacException;
			"Plannify a scheduled task to recovery import"
			String planifyRecoveryImportDataset(@TaskInfoDataset taskInfoDataset, Boolean notifyToUser) throws MetamacException;
			"Plannify a scheduled task to recovery import"
			String planifyDuplicationDataset(@TaskInfoDataset taskInfoDataset, String newDatasetId) throws MetamacException;
			"Perform the importation task"
    		processImportationTask(String importationJobKey, @TaskInfoDataset taskInfoDataset) throws MetamacException;
    		"Perform a rollback in a importation task"
    		processRollbackImportationTask(String recoveryJobKey, @TaskInfoDataset taskInfoDataset);
    		"Perform the duplication task"
    		processDuplicationTask(String duplicationJobKey, @TaskInfoDataset taskInfoDataset, String newDatasetId) throws MetamacException;
    		
     		"Check if exists any kind of job task in the @param resourceId"
    		boolean existsTaskForResource(String resourceId) throws MetamacException;
    
			"Check if exists an importation job task in the @param resourceId"
    		boolean existImportationTaskInResource(String resourceId) throws MetamacException;

			"Check if exists a recovery importation job task in the @param resourceId"
    		boolean existRecoveryImportationTaskInResource(String resourceId) throws MetamacException;

			"Check if exists a duplication job task in the @param resourceId"
			boolean existDuplicationTaskInResource(String resourceId) throws MetamacException;
    		
    		"Creates a task"
			@Task createTask(@Task task) throws MetamacException;
			"Updates a task"
			@Task updateTask(@Task task) throws MetamacException;
			"Retrieves a task by job key"
			@Task retrieveTaskByJob(String job) throws MetamacException;
    		"Mark task as finished"
			markTaskAsFinished(String job) throws MetamacException;
		    "Mark task as failed"
    		markTaskAsFailed(String job) throws MetamacException;
    		"Mark task as failed on application startup"
    		markTasksAsFailedOnApplicationStartup(String job) throws MetamacException;
    		"Find information about tasks"
			PagedResult<@Task> findTasksByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter) throws MetamacException;
		}
		
		// ----------------------------------------------------------------
		// 							ENTITIES
		// ---------------------------------------------------------------- 
		
		"Provides information about the tasks in background"	
	    Entity Task {
	   	 	databaseTable = "TB_TASKS"
	 		hint = "idSequence=TASKS"

			String job length="4000" key;
			-@TaskStatusTypeEnum status not nullable;
			String extensionPoint length="4000" nullable;
				   		      	
	   		Repository TaskRepository {
	   			save;
	   			delete;
				findByCondition(PagingParameter pagingParameter);
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				findByKey;
			}
	    }
	    
	}
}