import "classpath:/btdesign/metamac-statistical-resources-core-base.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-base-enums.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-tasks-dtos.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-tasks.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-common.btdesign"
import "classpath:/btdesign/metamac-core-common-enum.btdesign"

Application DatasetsStatisticalResources { 
	basePackage=unused

	Module domain_datasets {
		basePackage=org.siemac.metamac.statistical.resources.core.dataset

		// ----------------------------------------------------------------
		// 							SERVICES
		// ----------------------------------------------------------------
		
		Service DatasetService {
			> @DatasourceRepository
			> @DatasetRepository
			> @DatasetVersionRepository
			> @CodeDimensionRepository
			> @AttributeValueRepository
			> @StatisticOfficialityRepository
			> @TaskService
 			> @CategorisationRepository
 			> @CategorisationSequenceRepository
 			> @DimensionRepresentationMappingRepository
			
			// Datasources
			@Datasource createDatasource(String datasetVersionUrn, @Datasource datasource) throws MetamacException;
	    	@Datasource updateDatasource(@Datasource datasource) throws MetamacException;
	    	@Datasource retrieveDatasourceByUrn(String urn) throws MetamacException;
	    	deleteDatasource(String urn) throws MetamacException;
	    	List<@Datasource> retrieveDatasourcesByDatasetVersion(String datasetVersionUrn) throws MetamacException;
	    	
	    	// Datasets Versions
	    	"Creates dataset version"
			@DatasetVersion createDatasetVersion(@DatasetVersion datasetVersion, @ExternalItem statisticalOperation) throws MetamacException;
			"Updates dataset version"
			@DatasetVersion updateDatasetVersion(@DatasetVersion datasetVersion) throws MetamacException;
			"Retrieves dataset version by urn"
			@DatasetVersion retrieveDatasetVersionByUrn(String datasetVersionUrn) throws MetamacException;
			"Retrieves last dataset version by dataset urn"
			@DatasetVersion retrieveLatestDatasetVersionByDatasetUrn(String datasetUrn) throws MetamacException;
			"Retrieve latest published datasetVersion providing datasetUrn"
    		@DatasetVersion retrieveLatestPublishedDatasetVersionByDatasetUrn(String datasetUrn) throws MetamacException;
			"Retrieves all datasets versions of one dataset"
			List<@DatasetVersion> retrieveDatasetVersions(String datasetVersionUrn) throws MetamacException;
			"Finds datasets versions by criteria"
    		PagedResult<@DatasetVersion> findDatasetVersionsByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Deletes dataset version. This must be last version and no published"
    		deleteDatasetVersion(String datasetVersionUrn) throws MetamacException;
    		
    		proccessDatasetFileImportationResult(String datasetImportationId, List<@FileDescriptorResult> fileDescriptors) throws MetamacException;
    		importDatasourcesInDatasetVersion(String datasetVersionUrn, List<URL> fileUrls,  Map<String,String> dimensionRepresentationMapping) throws MetamacException; 
    		importDatasourcesInStatisticalOperation(String statisticalOperationUrn, List<URL> fileUrls) throws MetamacException; 

    		// Datasets
    		"Finds datasets by criteria"
    		PagedResult<@Dataset> findDatasetsByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;

    		//Data related actions
    		"Retrieve Dataset version dimensions ids"
    		List<String> retrieveDatasetVersionDimensionsIds(String datasetVersionUrn) throws MetamacException;
    		"Retrieve the coverage for a given dimension"
    		List<@CodeDimension> retrieveCoverageForDatasetVersionDimension(String datasetVersionUrn, String dsdDimensionId) throws MetamacException;
    		"Retrieve the coverage for a given dimension"
    		List<@CodeDimension> filterCoverageForDatasetVersionDimension(String datasetVersionUrn, String dsdDimensionId, String filter) throws MetamacException;
			"Save a mapping between dimensions and representations for a datasource"
			saveDimensionRepresentationMapping(@DatasetVersion datasetVersion, String datasourceFilename, Map<String, String> mapping) throws MetamacException;

    		"Create attribute instances"
    		AttributeInstanceDto createAttributeInstance(String datasetVersionUrn, AttributeInstanceDto attributeInstanceDto) throws MetamacException;
    		"Update attribute instances"
    		AttributeInstanceDto updateAttributeInstance(String datasetVersionUrn, AttributeInstanceDto attributeInstanceDto) throws MetamacException;
    		"Delete attribute instances"
    		deleteAttributeInstance(String datasetVersionUrn, String uuid) throws MetamacException;
    		"Retrieve attrubibute instances"
    		List<AttributeInstanceDto> retrieveAttributeInstances(String datasetVersionUrn, String attributeId) throws MetamacException;
    		"Retrieve the coverage for a given attribute"
    		List<@AttributeValue> retrieveCoverageForDatasetVersionAttribute(String datasetVersionUrn, String dsdAttributeId) throws MetamacException;
    		
    		// Statistic officialities
    		List<@StatisticOfficiality> findStatisticOfficialities() throws MetamacException;
    		
    		// Categorisations
    		"Creates categorisation"
    		@Categorisation createCategorisation(String datasetVersionUrn, @Categorisation categorisation) throws MetamacException;
    		"Initialize identifiable metadata of categorisation (code, urn...)"
    		initializeCategorisationMetadataForCreation(@Categorisation categorisation) throws MetamacException;
    		"Retrieves categorisation by urn"
    		@Categorisation retrieveCategorisationByUrn(String urn) throws MetamacException;
    		"Deletes categorisation"
    		deleteCategorisation(String urn) throws MetamacException;
    		"Ends the validity of a categorisation. ValidTo date is optional"
    		@Categorisation endCategorisationValidity(String urn, DateTimeTZ validTo) throws MetamacException;
    		"Retrieves all categorisations by dataset"
    		List<@Categorisation> retrieveCategorisationsByDatasetVersion(String datasetVersionUrn) throws MetamacException;
			"Finds categorisations by criteria"
    		PagedResult<@Categorisation> findCategorisationsByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
		}  

		// ----------------------------------------------------------------
		// 							ENTITIES
		// ---------------------------------------------------------------- 

		Entity Datasource {
			databaseTable="TB_DATASOURCES"
			hint="idSequence=DATASOURCES"
			not auditable
			gap

			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;

			- @IdentifiableStatisticalResource identifiableStatisticalResource databaseColumn="STATISTICAL_RESOURCE_FK" not nullable cascade="all";

			"Value of next update metadata if the source of datasource is a px"
			DateTimeTZ dateNextUpdate nullable;
			String filename not nullable;

			// Relations
            "Dataset version"
			- @DatasetVersion datasetVersion cascade="none" fetch="lazy" nullable databaseColumn="DATASET_VERSION_FK" <-> datasources;

			Repository DatasourceRepository {
				save;
				delete;
				findAll;
				findById;
				findByCondition;
				findByCondition(PagingParameter pagingParameter);
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				@Datasource retrieveByUrn(String urn) throws MetamacException;
				List<@Datasource> findByDatasetAndDatasourceFilename(String datasetVersionUrn, String filename);
			}
		}

		Entity Dataset {
			databaseTable="TB_DATASETS"
			hint="idSequence=DATASETS"
			!auditable

			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;

			"Root dataset will be identifiable to be referenced instead of referencing specific versions"
			- @IdentifiableStatisticalResource identifiableStatisticalResource databaseColumn="IDENTIFIABLE_RESOURCE_FK" not nullable cascade="all";
			"All versions"
			- Bag<@DatasetVersion> versions cascade="all-delete-orphan" fetch="lazy" inverse <-> dataset;

			Repository DatasetRepository {
				findByCondition;
				findByCondition(PagingParameter pagingParameter);
				findByQuery;
				String findDatasetUrnLinkedToDatasourceFile(String filename);
				save;
				delete;
				@Dataset retrieveByUrn(String urn) throws MetamacException;
			}
		}

		Entity DatasetVersion {
			databaseTable="TB_DATASETS_VERSIONS"
			hint="idSequence=DATASETS_VERSIONS"
			!auditable
			gap

			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;

			- @SiemacMetadataStatisticalResource siemacMetadataStatisticalResource databaseColumn="SIEMAC_RESOURCE_FK" not nullable cascade="all";

			//Content descriptors

			// Dimension or attribute id marked as geographic
			- Bag<@ExternalItem> geographicCoverage cascade="all-delete-orphan" fetch="lazy" databaseJoinTable="TB_DV_GEO_COVERAGE" databaseColumn="GEO_CODE_FK" databaseJoinColumn="DATASET_VERSION_FK";
			// Dimension or attribute id marked as temporal
			- Bag<@TemporalCode> temporalCoverage cascade="all-delete-orphan" fetch="lazy" databaseJoinTable="TB_DV_TEMP_COVERAGE" databaseColumn="TEMP_CODE_FK" databaseJoinColumn="DATASET_VERSION_FK";
			// Dimension or attribute id marked as measure
			- Bag<@ExternalItem> measureCoverage cascade="all-delete-orphan" fetch="lazy" databaseJoinTable="TB_DV_MEASURE_COVERAGE" databaseColumn="MEASURE_CODES_FK" databaseJoinColumn="DATASET_VERSION_FK";
			// Dimensions coverages
			- Bag<@CodeDimension> dimensionsCoverage cascade="all-delete-orphan" fetch="lazy" inverse orderby="id asc" <-> datasetVersion;
			// Attributes coverages
			- Bag<@AttributeValue> attributesCoverage cascade="all-delete-orphan" fetch="lazy" inverse orderby="id asc" <-> datasetVersion;
			//geographic granularities
			- Set<@ExternalItem> geographicGranularities cascade="all-delete-orphan" fetch="lazy" databaseJoinTable="TB_DV_GEO_GRANULARITY" databaseColumn="GEOGRAPHIC_GRANULARITY_FK" databaseJoinColumn="DATASET_VERSION_FK";
			//temporal granularities
			- Set<@ExternalItem> temporalGranularities cascade="all-delete-orphan" fetch="lazy" databaseJoinTable="TB_DV_TEMP_GRANULARITY" databaseColumn="TEMPORAL_GRANULARITY_FK" databaseJoinColumn="DATASET_VERSION_FK";
			//First date which data refers to
			DateTimeTZ dateStart nullable;
			//Last date which data refers to
			DateTimeTZ dateEnd nullable;
			- Bag<@ExternalItem> statisticalUnit cascade="all-delete-orphan" fetch="lazy" databaseJoinTable="TB_EI_STATISTICAL_UNIT" databaseColumn="STATISTICAL_UNIT_FK" databaseJoinColumn="DATASET_VERSION_FK";

			//Production descriptor
			- @ExternalItem relatedDsd nullable cascade="all" databaseColumn="RELATED_DSD_FK"; 
			boolean relatedDsdChanged transient;
			String datasetRepositoryId nullable;

			//Class descriptors

			//Number of observations contained in the dataset
			Long formatExtentObservations nullable;
			//Number of diemnsions defined in the DSD
			Integer formatExtentDimensions nullable;

			//Publishing descriptors

			//public date of next update
			DateTimeTZ dateNextUpdate nullable;
			//flag indicating if date next update was modified by user
			Boolean userModifiedDateNextUpdate nullable;
			//Frecuency which the data is updated
			- @ExternalItem updateFrequency nullable databaseColumn="UPDATE_FREQUENCY_FK" cascade="all";
			//Official/no official statistic
			- @StatisticOfficiality statisticOfficiality nullable databaseColumn="STAT_OFFICIALITY_FK" cascade="none";
			//Bibliographic citation
			- @InternationalString bibliographicCitation nullable cascade="all" databaseColumn="BIBLIOGRAPHIC_CITATION_FK";

			// Relations
			"Parent"
			- @Dataset dataset not nullable cascade="none" databaseColumn="DATASET_FK" <-> versions;
			"Data sources"
			- Bag<@Datasource> datasources cascade="all-delete-orphan" fetch="lazy" inverse orderby="id asc" <-> datasetVersion;
			"Categorisations"
			- Bag<@Categorisation> categorisations cascade="all-delete-orphan" fetch="lazy" inverse <-> datasetVersion;
			"Dimension representation mappings"
			- Bag<@DimensionRepresentationMapping> dimensionRepresentationMappings cascade="all-delete-orphan" fetch="lazy" inverse orderby="id asc" <-> datasetVersion;

			Repository DatasetVersionRepository {
				save;
				delete;
				findAll;
				findById;
				findByCondition;
				findByCondition(PagingParameter pagingParameter);
				@DatasetVersion retrieveByUrn(String urn) throws MetamacException;
				@DatasetVersion retrieveByUrnPublished(String urn) throws MetamacException;
				@DatasetVersion retrieveLastVersion(String datasetUrn) throws MetamacException;
				@DatasetVersion retrieveLastPublishedVersion(String datasetUrn) throws MetamacException;
				@DatasetVersion retrieveByVersion(Long statisticalResourceId, String versionLogic) throws MetamacException;
				boolean isLastVersion(String datasetVersionUrn) throws MetamacException;
				List<String> retrieveDimensionsIds(@DatasetVersion datasetVersion) throws MetamacException;
				//Is required by
				List<RelatedResourceResult> retrieveIsRequiredBy(@DatasetVersion datasetVersion) throws MetamacException;  
				List<RelatedResourceResult> retrieveIsRequiredByOnlyLastPublished(@DatasetVersion datasetVersion) throws MetamacException;
				//Is replaced by version
				RelatedResourceResult retrieveIsReplacedByVersion(@DatasetVersion datasetVersion) throws MetamacException;  
				RelatedResourceResult retrieveIsReplacedByVersionOnlyLastPublished(@DatasetVersion datasetVersion) throws MetamacException;
				//Is replaced by
				RelatedResourceResult retrieveIsReplacedBy(@DatasetVersion datasetVersion) throws MetamacException;  
				RelatedResourceResult retrieveIsReplacedByOnlyLastPublished(@DatasetVersion datasetVersion) throws MetamacException;  
				//Is part of
				List<RelatedResourceResult> retrieveIsPartOf(@DatasetVersion datasetVersion) throws MetamacException;  
				List<RelatedResourceResult> retrieveIsPartOfOnlyLastPublished(@DatasetVersion datasetVersion) throws MetamacException;  
			}
		}

		"Statistic officiality List"
    	Entity StatisticOfficiality {
    		databaseTable="TB_LIS_STAT_OFFICIALITY"
    		hint="idSequence=STAT_OFFICIALITY"
    		!auditable

    		"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;

    		String identifier;
    		- @InternationalString description nullable cascade="all" databaseColumn="DESCRIPTION_FK";

    		Repository StatisticOfficialityRepository {
    			findById;
    			findAll;
    		}
    	}

    	Entity CodeDimension {
    		databaseTable="TB_CODE_DIMENSIONS"
    		hint="idSequence=CODE_DIMENSIONS"
    		!auditable
    		gap

    		"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;

    		String dsdComponentId;
    		String identifier;
    		String title length="4000";
    		- @DatasetVersion datasetVersion cascade="none" fetch="lazy" not nullable databaseColumn="DATASET_VERSION_FK" <-> dimensionsCoverage;

    		Repository CodeDimensionRepository {
    			findByQuery;
    			List<@CodeDimension> findCodesForDatasetVersionByDimensionId(long datasetVersionId, String dimensionId, String filter) throws MetamacException;	
    		}
    	}

     	Entity AttributeValue {
    		databaseTable="TB_ATTRIBUTE_VALUES"
    		hint="idSequence=ATTRIBUTE_VALUES"
    		!auditable
    		gap

    		"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;

    		String dsdComponentId;
    		String identifier;
    		String title length="4000";
    		- @DatasetVersion datasetVersion cascade="none" fetch="lazy" not nullable databaseColumn="DATASET_VERSION_FK" <-> attributesCoverage;

    		Repository AttributeValueRepository {
    			findByQuery;
    			List<@AttributeValue> findValuesForDatasetVersionByAttributeId(long datasetVersionId, String attributeId) throws MetamacException;
    		}
    	}

    	Entity TemporalCode {
    		databaseTable="TB_TEMP_CODES"
    		hint="idSequence=TEMP_CODES"
    		!auditable

    		"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;

    		String identifier;
    		String title length="4000";
    	}
    	
    	"Associates an Dataset with a Category"
		Entity Categorisation {
			databaseTable = "TB_CATEGORISATIONS"
			hint = "idSequence=CATEGORISATIONS"
			gap
			
			Long id key;
			- @ExternalItem category not nullable cascade="all" databaseColumn="CATEGORY_FK";
			- @DatasetVersion datasetVersion not nullable cascade="none" databaseColumn="DATASET_VERSION_FK" <-> categorisations;
			- @VersionableStatisticalResource versionableStatisticalResource databaseColumn="VERSIONABLE_RESOURCE_FK" not nullable cascade="all";
			- @ExternalItem maintainer cascade="all" databaseColumn="MAINTAINER_FK" not nullable;
			
			"Calculate valid from of categorisation. If categorisation was created after dataset publication, validFrom will be equals to categorisation creation date. Otherwise, it will be validFrom of dataset"
			DateTimeTZ validFromEffective nullable transient;
			"Calculate valid to of categorisation. If categorisation validity was finished, validTo will be this date."
			DateTimeTZ validToEffective nullable transient;
			
			Repository CategorisationRepository {
				save;
				delete;			
				findById;
				findByCondition;
				findByCondition(PagingParameter pagingParameter);
				findByQuery(String query, Map<String, Object> parameters);
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				@Categorisation retrieveByUrn(String urn) throws MetamacException;
				List<@Categorisation> retrieveCategorisationsByDatasetVersionUrn(String urn) throws MetamacException;
			}
		}
		
		"Sequences to generate unique identifiers to categorisations"
		Entity CategorisationSequence {
			databaseTable = "TB_CATEGORISATION_SEQUENCES"
			hint = "idSequence=CATEGORISATION_SEQUENCES"
			!auditable
			!optimisticLocking
			
			Long id not nullable key;
			String maintainerUrn not nullable;
			Long actualSequence not nullable;
			
			Repository CategorisationSequenceRepository {
				save;
				Long generateNextSequence(String maintainerUrn);
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
			}
		}

		"Mapping between the DSD dimensions and the representation between each dimension"
		Entity DimensionRepresentationMapping {
    		databaseTable="TB_DIM_REPR_MAPPING"
    		hint="idSequence=DIM_REPR_MAPPING"
    		!auditable

    		"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;

			
			- @DatasetVersion datasetVersion cascade="none" fetch="lazy" nullable databaseColumn="DATASET_VERSION_FK" <-> dimensionRepresentationMappings;
    		String datasourceFilename not nullable;
    		String mapping length="4000";
    		
    		Repository DimensionRepresentationMappingRepository {
				save;
				delete;
				findByCondition;
				@DimensionRepresentationMapping findByDatasetAndDatasourceFilename(String datasetVersionUrn, String datasourceFilename) throws MetamacException;
			}
    	}
	}
}
