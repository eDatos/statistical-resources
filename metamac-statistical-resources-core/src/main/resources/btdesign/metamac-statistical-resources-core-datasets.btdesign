import "classpath:/btdesign/metamac-statistical-resources-core-base.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-base-enums.btdesign"
import "classpath:/btdesign/export/metamac-core-common-entity.btdesign"

Application DatasetsStatisticalResources {
	basePackage=unused

	Module domain_datasets {
		basePackage=org.siemac.metamac.statistical.resources.core.dataset

		// ----------------------------------------------------------------
		// 							SERVICES
		// ----------------------------------------------------------------
		
		Service DatasetService {
			> @DatasourceRepository
			> @DatasetRepository
			> @DatasetVersionRepository

			// Datasources
			@Datasource createDatasource(String datasetVersionUrn, @Datasource datasource) throws MetamacException;
	    	@Datasource updateDatasource(@Datasource datasource) throws MetamacException;
	    	@Datasource retrieveDatasourceByUrn(String urn) throws MetamacException;
	    	deleteDatasource(String urn) throws MetamacException;
	    	List<@Datasource> retrieveDatasourcesByDatasetVersion(String datasetVersionUrn) throws MetamacException;
	    	
	    	// Datasets
	    	"Creates dataset version"
			@DatasetVersion createDatasetVersion(@DatasetVersion datasetVersion) throws MetamacException;
			"Updates dataset version"
			@DatasetVersion updateDatasetVersion(@DatasetVersion datasetVersion) throws MetamacException;
			"Retrieves dataset version by urn"
			@DatasetVersion retrieveDatasetVersionByUrn(String datasetVersionUrn) throws MetamacException;
			"Retrieves all datasets versions of one dataset"
			List<@DatasetVersion> retrieveDatasetVersions(String datasetUrn) throws MetamacException;
			"Finds datasets by criteria"
    		PagedResult<@DatasetVersion> findDatasetVersionsByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Deletes dataset version. This must be last version and no published"
    		deleteDatasetVersion(String datasetVersionUrn) throws MetamacException;
    		"Creates a new version of a dataset, copying metadata from version with provided urn"
    		@DatasetVersion versioningDatasetVersion(String datasetVersionUrnToCopy, @VersionTypeEnum versionType) throws MetamacException;
		}  


		// ----------------------------------------------------------------
		// 							ENTITIES
		// ---------------------------------------------------------------- 

		Entity Datasource {
			databaseTable="TB_DATASOURCES"
			hint="idSequence=DATASOURCES"
			!auditable

			- @IdentifiableStatisticalResource identifiableStatisticalResource databaseColumn="STATISTICAL_RESOURCE_FK" not nullable cascade="all";
			
			// Relations
            "Dataset version"
			- @DatasetVersion datasetVersion cascade="none" fetch="lazy" nullable databaseColumn="DATASET_VERSION_FK" <-> datasources;
			
			Repository DatasourceRepository {
				save;
				delete;
				findAll;
				findById;
				findByCondition;
				findByCondition(PagingParameter pagingParameter);
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				@Datasource retrieveByUrn(String urn) throws MetamacException;
			}
		}
		
		Entity Dataset {
			databaseTable="TB_DATASETS"
			hint="idSequence=DATASETS"
			!auditable
			
			"All versions"
			- Bag<@DatasetVersion> versions cascade="all-delete-orphan" fetch="lazy" inverse <-> dataset orderby="id asc";
			
			Repository DatasetRepository {
				save;
				delete;
			}
		}
		
		Entity DatasetVersion {
			databaseTable="TB_DATASETS_VERSIONS"
			hint="idSequence=DATASETS_VERSIONS"
			!auditable

			- @SiemacMetadataStatisticalResource siemacMetadataStatisticalResource databaseColumn="STATISTICAL_RESOURCE_FK" not nullable cascade="all";

			// Relations
			"Parent"
			- @Dataset dataset not nullable cascade="none" databaseColumn="DATASET_FK" <-> versions;
			"Data sources"
			- Bag<@Datasource> datasources cascade="all-delete-orphan" fetch="lazy" inverse orderby="id asc" <-> datasetVersion;
			
			Repository DatasetVersionRepository {
				save;
				delete;
				findByCondition;
				findByCondition(PagingParameter pagingParameter);
				@DatasetVersion retrieveByUrn(String urn) throws MetamacException;  
				@DatasetVersion retrieveLastVersion(Long statisticalResourceId) throws MetamacException;
				@DatasetVersion retrieveByVersion(Long statisticalResourceId, String versionLogic) throws MetamacException;
			}
		}
	}
}