import "classpath:/btdesign/metamac-statistical-resources-core-base.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-base-enums.btdesign"
import "classpath:/btdesign/export/metamac-core-common-entity.btdesign"
import "classpath:/btdesign/metamac-core-common-enum.btdesign"

Application DatasetsStatisticalResources { 
	basePackage=unused

	Module domain_datasets {
		basePackage=org.siemac.metamac.statistical.resources.core.dataset

		// ----------------------------------------------------------------
		// 							SERVICES
		// ----------------------------------------------------------------
		
		Service DatasetService {
			> @DatasourceRepository
			> @DatasetRepository
			> @DatasetVersionRepository
			> @CodeDimensionRepository
			> @StatisticOfficialityRepository
			
			// Datasources
			@Datasource createDatasource(String datasetVersionUrn, @Datasource datasource) throws MetamacException;
	    	@Datasource updateDatasource(@Datasource datasource) throws MetamacException;
	    	@Datasource retrieveDatasourceByUrn(String urn) throws MetamacException;
	    	deleteDatasource(String urn) throws MetamacException;
	    	List<@Datasource> retrieveDatasourcesByDatasetVersion(String datasetVersionUrn) throws MetamacException;
	    	
	    	// Datasets Versions
	    	"Creates dataset version"
			@DatasetVersion createDatasetVersion(@DatasetVersion datasetVersion, @ExternalItem statisticalOperation) throws MetamacException;
			"Updates dataset version"
			@DatasetVersion updateDatasetVersion(@DatasetVersion datasetVersion) throws MetamacException;
			"Retrieves dataset version by urn"
			@DatasetVersion retrieveDatasetVersionByUrn(String datasetVersionUrn) throws MetamacException;
			"Retrieves last dataset version by dataset urn"
			@DatasetVersion retrieveLatestDatasetVersionByDatasetUrn(String datasetUrn) throws MetamacException;
			"Retrieve latest published datasetVersion providing datasetUrn"
    		@DatasetVersion retrieveLatestPublishedDatasetVersionByDatasetUrn(String datasetUrn) throws MetamacException;
			"Retrieves all datasets versions of one dataset"
			List<@DatasetVersion> retrieveDatasetVersions(String datasetVersionUrn) throws MetamacException;
			"Finds datasets versions by criteria"
    		PagedResult<@DatasetVersion> findDatasetVersionsByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Deletes dataset version. This must be last version and no published"
    		deleteDatasetVersion(String datasetVersionUrn) throws MetamacException;
    		"Creates a new version of a dataset, copying metadata from version with provided urn"
    		@DatasetVersion versioningDatasetVersion(String datasetVersionUrnToCopy, @VersionTypeEnum versionType) throws MetamacException;
    		
    		// Datasets
    		"Finds datasets by criteria"
    		PagedResult<@Dataset> findDatasetsByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
    		
    		//Data related actions
    		"Retrieve Dataset version dimensions ids"
    		List<String> retrieveDatasetVersionDimensionsIds(String datasetVersionUrn) throws MetamacException;
    		"Retrieve the coverage for a given dimension"
    		List<@CodeDimension> retrieveCoverageForDatasetVersionDimension(String datasetVersionUrn, String dsdDimensionId) throws MetamacException;
    		
    		// Statistic officialities
    		List<@StatisticOfficiality> findStatisticOfficialities() throws MetamacException;
		}  


		// ----------------------------------------------------------------
		// 							ENTITIES
		// ---------------------------------------------------------------- 
		
		Entity Datasource {
			databaseTable="TB_DATASOURCES"
			hint="idSequence=DATASOURCES"
			not auditable


			- @IdentifiableStatisticalResource identifiableStatisticalResource databaseColumn="STATISTICAL_RESOURCE_FK" not nullable cascade="all";
			
			"Value of nect update metadata if the source of datasource is a px"
			DateTimeTZ dateNextUpdate nullable;
			
			// Relations
            "Dataset version"
			- @DatasetVersion datasetVersion cascade="none" fetch="lazy" nullable databaseColumn="DATASET_VERSION_FK" <-> datasources;
			
			Repository DatasourceRepository {
				save;
				delete;
				findAll;
				findById;
				findByCondition;
				findByCondition(PagingParameter pagingParameter);
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				@Datasource retrieveByUrn(String urn) throws MetamacException;
			}
		}
		
		Entity Dataset {
			databaseTable="TB_DATASETS"
			hint="idSequence=DATASETS"
			!auditable
			
			"Root dataset will be identifiable to be referenced instead of referencing specific versions"
			- @IdentifiableStatisticalResource identifiableStatisticalResource databaseColumn="IDENTIFIABLE_RESOURCE_FK" not nullable cascade="all";
			"All versions"
			- Bag<@DatasetVersion> versions cascade="all-delete-orphan" fetch="lazy" inverse <-> dataset orderby="id asc";
			
			Repository DatasetRepository {
				findByCondition;
				findByCondition(PagingParameter pagingParameter);
				save;
				delete;
				@Dataset retrieveByUrn(String urn) throws MetamacException;
			}
		}
		

		Entity DatasetVersion {
			databaseTable="TB_DATASETS_VERSIONS"
			hint="idSequence=DATASETS_VERSIONS"
			!auditable
			gap

			- @SiemacMetadataStatisticalResource siemacMetadataStatisticalResource databaseColumn="SIEMAC_RESOURCE_FK" not nullable cascade="all";
			
			//Content descriptors
			
			// Dimension or attribute id marked as geographic
			- Bag<@ExternalItem> geographicCoverage cascade="all-delete-orphan" fetch="lazy" databaseJoinTable="TB_DV_GEO_COVERAGE" databaseColumn="GEO_CODE_FK" databaseJoinColumn="DATASET_VERSION_FK";
			// Dimension or attribute id marked as temporal
			- Bag<@TemporalCode> temporalCoverage cascade="all-delete-orphan" fetch="lazy" databaseJoinTable="TB_DV_TEMP_COVERAGE" databaseColumn="TEMP_CODE_FK" databaseJoinColumn="DATASET_VERSION_FK";
			// Dimension or attribute id marked as measure
			- Bag<@ExternalItem> measureCoverage cascade="all-delete-orphan" fetch="lazy" databaseJoinTable="TB_DV_MEASURE_COVERAGE" databaseColumn="MEASURE_CODES_FK" databaseJoinColumn="DATASET_VERSION_FK";
			// Dimensions coverages
			- Bag<@CodeDimension> coverages cascade="all-delete-orphan" fetch="lazy" inverse orderby="id asc" <-> datasetVersion;
			//geographic granularities
			- Bag<@ExternalItem> geographicGranularities cascade="all-delete-orphan" fetch="lazy" databaseJoinTable="TB_DV_GEO_GRANULARITY" databaseColumn="GEOGRAPHIC_GRANULARITY_FK" databaseJoinColumn="DATASET_VERSION_FK";
			//temporal granularities
			- Bag<@ExternalItem> temporalGranularities cascade="all-delete-orphan" fetch="lazy" databaseJoinTable="TB_DV_TEMP_GRANULARITY" databaseColumn="TEMPORAL_GRANULARITY_FK" databaseJoinColumn="DATASET_VERSION_FK";
			//First date which data refers to
			DateTimeTZ dateStart nullable;
			//Last date which data refers to
			DateTimeTZ dateEnd nullable;
			- Bag<@ExternalItem> statisticalUnit cascade="all-delete-orphan" fetch="lazy" databaseJoinTable="TB_EI_STATISTICAL_UNIT" databaseColumn="STATISTICAL_UNIT_FK" databaseJoinColumn="DATASET_VERSION_FK";
			
			//Production descriptor
			- @ExternalItem relatedDsd nullable cascade="all" databaseColumn="RELATED_DSD_FK"; 
			boolean relatedDsdChanged transient;
			String datasetRepositoryId nullable;
			
			//Class descriptors
			
			//Number of observations contained in the dataset
			Integer formatExtentObservations nullable;
			//Number of diemnsions defined in the DSD
			Integer formatExtentDimensions nullable;
			
			//Publishing descriptors
			
			//public date of next update
			DateTimeTZ dateNextUpdate nullable;
			//Frecuency which the data is updated
			- @ExternalItem updateFrequency nullable databaseColumn="UPDATE_FREQUENCY_FK" cascade="all";
			//Official/no official statistic
			- @StatisticOfficiality statisticOfficiality nullable databaseColumn="STAT_OFFICIALITY_FK";
			//Bibliographic citation
			- @InternationalString bibliographicCitation nullable databaseColumn="BIBLIOGRAPHIC_CITATION_FK";
			
			// Relations
			"Parent"
			- @Dataset dataset not nullable cascade="none" databaseColumn="DATASET_FK" <-> versions;
			"Data sources"
			- Bag<@Datasource> datasources cascade="all-delete-orphan" fetch="lazy" inverse orderby="id asc" <-> datasetVersion;
			
			Repository DatasetVersionRepository {
				save;
				delete;
				findAll;
				findById;
				findByCondition;
				findByCondition(PagingParameter pagingParameter);
				@DatasetVersion retrieveByUrn(String urn) throws MetamacException;  
				@DatasetVersion retrieveLastVersion(String datasetUrn) throws MetamacException;
				@DatasetVersion retrieveLastPublishedVersion(String datasetUrn) throws MetamacException;
				@DatasetVersion retrieveByVersion(Long statisticalResourceId, String versionLogic) throws MetamacException;
				boolean isLastVersion(String datasetVersionUrn) throws MetamacException;
				List<String> retrieveDimensionsIds(@DatasetVersion datasetVersion) throws MetamacException;
			}
		}
		
		"Statistic officiality List"
    	Entity StatisticOfficiality {
    		databaseTable="TB_LIS_STAT_OFFICIALITY"
    		hint="idSequence=STAT_OFFICIALITY"
    		!auditable
    		
    		String identifier;
    		- @InternationalString description nullable cascade="all" databaseColumn="DESCRIPTION_FK";
    		
    		Repository StatisticOfficialityRepository {
    			findById;
    			findAll;
    		}
    	}

    	Entity CodeDimension {
    		databaseTable="TB_CODE_DIMENSIONS"
    		hint="idSequence=CODE_DIMENSIONS"
    		!auditable
    		gap
    		
    		"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
    		String dsdComponentId;
    		String identifier;
    		String title length="4000";
    		- @DatasetVersion datasetVersion cascade="none" fetch="lazy" not nullable databaseColumn="DATASET_VERSION_FK" <-> coverages;
    		
    		Repository CodeDimensionRepository {
    			findByQuery;
    			List<@CodeDimension> findCodesForDatasetVersionByDimensionId(long datasetVersionId, String dimensionId) throws MetamacException;	
    		}
    	}
    	
    	Entity TemporalCode {
    		databaseTable="TB_TEMP_CODES"
    		hint="idSequence=TEMP_CODES"
    		!auditable
    		
    		"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
    		String identifier;
    		String title length="4000";
    	}
	}
}