import "classpath:/btdesign/metamac-statistical-resources-core-base.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-base-enums.btdesign"

import "classpath:/btdesign/metamac-statistical-resources-core-datasets.btdesign"

import "classpath:/btdesign/metamac-statistical-resources-core-queries.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-common.btdesign"
import "classpath:/btdesign/metamac-core-common-enum.btdesign"

Application PublicationsStatisticalResources {
	basePackage=unused

	Module domain_publications {
		basePackage=org.siemac.metamac.statistical.resources.core.publication

		// ----------------------------------------------------------------
		// 							SERVICES
		// ----------------------------------------------------------------
		
		Service PublicationService {
			> @PublicationRepository
			> @PublicationVersionRepository
			> @ElementLevelRepository
			> @ChapterRepository
			> @CubeRepository
			
			// Publications
	    	"Creates publication version"
			@PublicationVersion createPublicationVersion(@PublicationVersion publicationVersion, @ExternalItem statisticalOperation) throws MetamacException;
			"Updates publication version"
			@PublicationVersion updatePublicationVersion(@PublicationVersion publicationVersion) throws MetamacException;
			"Retrieves publication version by urn"
			@PublicationVersion retrievePublicationVersionByUrn(String publicationVersionUrn) throws MetamacException;
			"Retrieves latets publication version by publication urn"
			@PublicationVersion retrieveLatestPublicationVersionByPublicationUrn(String publicationUrn) throws MetamacException;
			"Retrieve latest published publicationVersion providing publicationUrn"
    		@PublicationVersion retrieveLatestPublishedPublicationVersionByPublicationUrn(String publicationUrn) throws MetamacException;
			"Retrieves all publications versions of one publication"
			List<@PublicationVersion> retrievePublicationVersions(String publicationVersionUrn) throws MetamacException;
			"Finds publications by criteria"
    		PagedResult<@PublicationVersion> findPublicationVersionsByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter) throws MetamacException;
			"Deletes publication version. This must be last version and no published"
    		deletePublicationVersion(String publicationVersionUrn) throws MetamacException;
    		
    		// Structure
    		@PublicationVersion importPublicationVersionStructure(String publicationVersionUrn, URL fileURL, String language) throws MetamacException;
    		
    		// Chapters
	    	@Chapter createChapter(String publicationVersionUrn, @Chapter chapter) throws MetamacException;
	    	@Chapter updateChapter(@Chapter chapter) throws MetamacException;
	    	@Chapter updateChapterLocation(String chapterUrn, String parentChapterUrn, Long orderInLevel) throws MetamacException;
	    	@Chapter retrieveChapter(String chapterUrn) throws MetamacException;
	    	deleteChapter(String chapterUrn) throws MetamacException;
	    	
	    	// Cubes
	    	@Cube createCube(String publicationVersionUrn, @Cube cube) throws MetamacException;
	    	@Cube updateCube(@Cube cube) throws MetamacException;
	    	@Cube updateCubeLocation(String cubeUrn, String parentChapterUrn, Long orderInLevel) throws MetamacException;
	    	@Cube retrieveCube(String cubeUrn) throws MetamacException;
	    	deleteCube(String cubeUrn) throws MetamacException;
		}  


		// ----------------------------------------------------------------
		// 							ENTITIES
		// ---------------------------------------------------------------- 

		Entity Publication {
			databaseTable="TB_PUBLICATIONS"
			hint="idSequence=PUBLICATIONS"
			!auditable
			
			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
			
			"Root publication will be identifiable to be referenced instead of referencing specific versions"
			- @IdentifiableStatisticalResource identifiableStatisticalResource databaseColumn="IDENTIFIABLE_RESOURCE_FK" not nullable cascade="all";
			"All versions"
			- Bag<@PublicationVersion> versions cascade="all-delete-orphan" fetch="lazy" inverse <-> publication orderby="id asc";
			
			Repository PublicationRepository {
				@Publication retrieveByUrn(String urn) throws MetamacException;
				findByCondition;
				save;
				delete;
			}
		}

		Entity PublicationVersion {
			databaseTable="TB_PUBLICATIONS_VERSIONS"
			hint="idSequence=PUBLICATIONS_VERSIONS"
			!auditable
			gap
			
			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;

			- @SiemacMetadataStatisticalResource siemacMetadataStatisticalResource databaseColumn="SIEMAC_RESOURCE_FK" not nullable cascade="all";
			
			// Format extent resources: Number of cubes that contains the collection
			Integer formatExtentResources nullable;

			"Parent"
			- @Publication publication not nullable cascade="none" databaseColumn="PUBLICATION_FK" <-> versions;
			"Association to all elements in the publication version"
			- Bag<@ElementLevel> childrenAllLevels cascade="all-delete-orphan" fetch="lazy" inverse orderby="parent asc, orderInLevel asc" <-> publicationVersion;
			"Association to elements in the first level of the publication"
			- Bag<@ElementLevel> childrenFirstLevel cascade="all-delete-orphan" fetch="lazy" inverse orderby="orderInLevel asc" <-> publicationVersionFirstLevel;
			"Lists all resources across the structure"
			- Bag<@RelatedResource> hasPart cascade="all-delete-orphan" fetch="lazy" databaseJoinTable="TB_RR_HAS_PART"  databaseColumn="HAS_PART_FK" databaseJoinColumn="PUB_VERSION_FK";
			
			Repository PublicationVersionRepository {
				save;
				delete;
				findById;
				findByCondition;
				findByCondition(PagingParameter pagingParameter);
				@PublicationVersion retrieveByUrn(String urn) throws MetamacException;
				@PublicationVersion retrieveByUrnPublished(String urn) throws MetamacException;
				@PublicationVersion retrieveLastVersion(String publicationUrn) throws MetamacException;
				@PublicationVersion retrieveLastPublishedVersion(String publicationUrn) throws MetamacException;
				@PublicationVersion retrieveByVersion(Long statisticalResourceId, String versionLogic) throws MetamacException;
			}
		}
		
		"Publication level"
        Entity ElementLevel {
        	databaseTable="TB_ELEMENTS_LEVELS"
        	hint="idSequence=ELEMENTS_LEVELS"
        	gap
        	!auditable
        	
        	"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
        	
            "Order in level"
			Long orderInLevel not nullable;
			
			// Relations
			"Children"
			- Bag<@ElementLevel> children cascade="all-delete-orphan" inverse orderby="orderInLevel asc" fetch="lazy" <-> parent;
            "Parent"
            - @ElementLevel parent cascade="none" databaseColumn="PARENT_FK" nullable <-> children;
			"Chapter"
			- @Chapter chapter cascade="all" nullable databaseColumn="CHAPTER_FK" <-> elementLevel;
			"Cube"
			- @Cube cube cascade="all" nullable databaseColumn="TABLE_FK" <-> elementLevel;
            "Relation to publication, filled for all items, regardless of the level"
			- @PublicationVersion publicationVersion cascade="none" fetch="lazy" not nullable databaseColumn="PUBLICATION_VERSION_ALL_FK" <-> childrenAllLevels;
			"Relation to publication, only filled for items in first level"
			- @PublicationVersion publicationVersionFirstLevel cascade="none" fetch="lazy" nullable databaseColumn="PUBLICATION_VERSION_FIRST_FK" <-> childrenFirstLevel;
			
			"Provides access to ElementLevel"
            Repository ElementLevelRepository {
            	findByCondition;
            	findByCondition(PagingParameter pagingParameter);
            	@ElementLevel save(@ElementLevel entity);
            	delete;
            }
        }  	
        
        "Publication chapter"
        Entity Chapter {
        	databaseTable="TB_CHAPTERS"
        	hint="idSequence=CHAPTERS"
        	gap
        	
        	"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
        	
        	- @NameableStatisticalResource nameableStatisticalResource databaseColumn="STATISTICAL_RESOURCE_FK" not nullable cascade="all";

			// Relations
            "Element level"
            - @ElementLevel elementLevel cascade="none" not nullable inverse <-> chapter;
			            
			"Provides access to Dimension"
            Repository ChapterRepository {
            	findByCondition;
            	findByCondition(PagingParameter pagingParameter);
            	findAll;
            	@Chapter save(@Chapter entity);
            	@Chapter retrieveChapterByUrn(String urn) throws MetamacException;
            	protected List<@Chapter> findByQuery;
            }
        }
        
        "Publication cube "
        Entity Cube {
        	databaseTable="TB_CUBES"
        	hint="idSequence=CUBES"
			gap
			
			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
			
			- @NameableStatisticalResource nameableStatisticalResource databaseColumn="STATISTICAL_RESOURCE_FK" not nullable cascade="all";
			
			// Relations
            "Element level"
            - @ElementLevel elementLevel cascade="none" not nullable inverse <-> cube;
        	"Dataset"
			- @Dataset dataset cascade="none" nullable databaseColumn="DATASET_FK";
			"Query"
			- @Query query cascade="none" nullable databaseColumn="QUERY_FK";
            
			"Provides access to Cube"
            Repository CubeRepository {
            	@Cube save(@Cube entity);
            	findByCondition;
            	findByCondition(PagingParameter pagingParameter) throws MetamacException;
            	@Cube retrieveCubeByUrn(String urn) throws MetamacException;
            	Boolean existAnyCubeInPublication(String publicationCode, String publicationVersionNumber) throws MetamacException;
            	List<String> findDatasetsLinkedWithPublicationVersion(String publicationVersionUrn) throws MetamacException;
            	List<String> findQueriesLinkedWithPublicationVersion(String publicationVersionUrn) throws MetamacException;
            }
        }         		
	}
}