import "classpath:/btdesign/metamac-core-common-dtos.btdesign"
import "classpath:/btdesign/metamac-core-common-enum.btdesign"

import "classpath:/btdesign/metamac-statistical-resources-core-common-dtos.btdesign"

import "classpath:/btdesign/metamac-statistical-resources-core-base-dtos.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-base-enums.btdesign"

import "classpath:/btdesign/metamac-statistical-resources-core-queries.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-queries-dtos.btdesign"

import "classpath:/btdesign/metamac-statistical-resources-core-datasets.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-datasets-dtos.btdesign"

import "classpath:/btdesign/metamac-statistical-resources-core-publications.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-publications-dtos.btdesign"

import "classpath:/btdesign/metamac-statistical-resources-core-constraints-enums.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-constraints-dtos.btdesign"

Application FacadeStatisticalResources {
	basePackage=unused

	Module core_facades {
		basePackage=org.siemac.metamac.statistical.resources.core.facade

		// ----------------------------------------------------------------
		// 							FACADE SERVICES
		// ----------------------------------------------------------------  
		
		Service StatisticalResourcesServiceFacade {
			> @QueryService
			> @DatasetService
			> @PublicationService
			> @DatasetLifecycleService
			> @PublicationLifecycleService
			> @QueryLifecyleService
			
			// QUERY VERSION
			"Retrieves a query scheme by URN"
            @QueryVersionDto retrieveQueryVersionByUrn(String urn) throws MetamacException;
            "Retrieve queries"
            List<@QueryVersionBaseDto> retrieveQueriesVersions() throws MetamacException;
            "Create a query"
            @QueryVersionDto createQuery(@QueryVersionDto queryVersionDto, @ExternalItemDto statisticalOperation) throws MetamacException;
            "Update a query"
            @QueryVersionDto updateQueryVersion(@QueryVersionDto queryVersionDto) throws MetamacException;
            "Find queries by criteria"
    		MetamacCriteriaResult<@QueryVersionBaseDto> findQueriesVersionsByCondition(MetamacCriteria criteria)  throws MetamacException;
            "Delete query"
            deleteQueryVersion(String urn) throws MetamacException;
            "Retrieve latest queryVersion providing queryUrn"
    		@QueryVersionDto retrieveLatestQueryVersion(String queryUrn) throws MetamacException;
    		"Retrieve latest published queryVersion providing queryUrn"
    		@QueryVersionDto retrieveLatestPublishedQueryVersion(String queryUrn) throws MetamacException
    		"Send to production validation"
    		@QueryVersionDto sendQueryVersionToProductionValidation(@QueryVersionDto queryVersionDto) throws MetamacException;
    		@QueryVersionBaseDto sendQueryVersionToProductionValidation(@QueryVersionBaseDto queryVersionDto) throws MetamacException;
    		"Send to diffusion validation"
    		@QueryVersionDto sendQueryVersionToDiffusionValidation(@QueryVersionDto queryVersionDto) throws MetamacException;
    		@QueryVersionBaseDto sendQueryVersionToDiffusionValidation(@QueryVersionBaseDto queryVersionDto) throws MetamacException;
    		"Send to validation rejected"
    		@QueryVersionDto sendQueryVersionToValidationRejected(@QueryVersionDto queryVersionDto) throws MetamacException;
    		@QueryVersionBaseDto sendQueryVersionToValidationRejected(@QueryVersionBaseDto queryVersionDto) throws MetamacException;
    		"Publishes a new version of a query version"
    		@QueryVersionDto publishQueryVersion(@QueryVersionDto queryVersionDto) throws MetamacException;
    		@QueryVersionBaseDto publishQueryVersion(@QueryVersionBaseDto queryVersionDto) throws MetamacException;
    		"Program publication"
    		@QueryVersionDto programPublicationQueryVersion(@QueryVersionDto queryVersionDto, JAVADATE validFrom) throws MetamacException;
    		@QueryVersionBaseDto programPublicationQueryVersion(@QueryVersionBaseDto queryVersionDto, JAVADATE validFrom) throws MetamacException;
    		"Cancel a query version publication"
    		@QueryVersionDto cancelPublicationQueryVersion(@QueryVersionDto queryVersionDto) throws MetamacException;
    		@QueryVersionBaseDto cancelPublicationQueryVersion(@QueryVersionBaseDto queryVersionDto) throws MetamacException;
    		"Creates a new version of a query version, copying metadata from version with provided urn"
    		@QueryVersionDto versioningQueryVersion(@QueryVersionDto queryVersionDto, @VersionTypeEnum versionType) throws MetamacException;
    		@QueryVersionBaseDto versioningQueryVersion(@QueryVersionBaseDto queryVersionDto, @VersionTypeEnum versionType) throws MetamacException;

    		// QUERIES
	   		"Find all queries"
	   		MetamacCriteriaResult<@RelatedResourceDto> findQueriesByCondition(MetamacCriteria criteria) throws MetamacException; 

			// DATASOURCES
			"Creates a datasource"
	    	@DatasourceDto createDatasource(String urnDatasetVersion, @DatasourceDto datasourceDto) throws MetamacException;
	    	"Updates metadata of datasource"
	    	@DatasourceDto updateDatasource(@DatasourceDto datasourceDto) throws MetamacException;
	    	"Retrieves datasource"
	    	@DatasourceDto retrieveDatasourceByUrn(String urn) throws MetamacException;
	    	"Deletes datasource"
	    	deleteDatasource(String urn) throws MetamacException;
	    	"Retrieves all datasources of a dataset version"
	    	List<@DatasourceDto> retrieveDatasourcesByDatasetVersion(String urnDatasetVersion) throws MetamacException;
	    	
	    	// DATASETS 
	   		"Find all datasets"
	   		MetamacCriteriaResult<@RelatedResourceDto> findDatasetsByCondition(MetamacCriteria criteria) throws MetamacException; 
	    	
	    	// DATASET VERSION
	    	"Creates dataset"
	   		@DatasetVersionDto createDataset(@DatasetVersionDto datasetVersionDto, @ExternalItemDto statisticalOperation) throws MetamacException;
	   		"Updates dataset"
            @DatasetVersionDto updateDatasetVersion(@DatasetVersionDto datasetVersionDto) throws MetamacException;
            "Deletes dataset"
            deleteDatasetVersion(String urn) throws MetamacException;
            "Finds datasets by criteria"
            MetamacCriteriaResult<@DatasetVersionBaseDto> findDatasetsVersionsByCondition(MetamacCriteria criteria) throws MetamacException;
            "Retrieves a dataset by URN"
            @DatasetVersionDto retrieveDatasetVersionByUrn(String urn) throws MetamacException;
            "Retrieves all dataset versions"
            List<@DatasetVersionBaseDto> retrieveDatasetVersions(String datasetVersionUrn) throws MetamacException;
    		"Retrieve latest datasetVersion providing datasetUrn"
    		@DatasetVersionDto retrieveLatestDatasetVersion(String datasetUrn) throws MetamacException;
    		"Retrieve latest published datasetVersion providing datasetUrn"
    		@DatasetVersionDto retrieveLatestPublishedDatasetVersion(String datasetUrn) throws MetamacException
    		"Retrieve main coverages for dataset Version";
    		@DatasetVersionMainCoveragesDto retrieveDatasetVersionMainCoverages(String datasetVersionUrn) throws MetamacException;
    		"Send to production validation"
    		@DatasetVersionDto sendDatasetVersionToProductionValidation(@DatasetVersionDto datasetVersionDto) throws MetamacException;
    		@DatasetVersionBaseDto sendDatasetVersionToProductionValidation(@DatasetVersionBaseDto datasetVersionDto) throws MetamacException;
    		"Send to diffusion validation"
    		@DatasetVersionDto sendDatasetVersionToDiffusionValidation(@DatasetVersionDto datasetVersionDto) throws MetamacException;
    		@DatasetVersionBaseDto sendDatasetVersionToDiffusionValidation(@DatasetVersionBaseDto datasetVersionDto) throws MetamacException;
    		"Send to validation rejected"
    		@DatasetVersionDto sendDatasetVersionToValidationRejected(@DatasetVersionDto datasetVersionDto) throws MetamacException;
    		@DatasetVersionBaseDto sendDatasetVersionToValidationRejected(@DatasetVersionBaseDto datasetVersionDto) throws MetamacException;
    		"Published a new version of a dataset"
    		@DatasetVersionDto publishDatasetVersion(@DatasetVersionDto datasetVersionDto) throws MetamacException;
    		@DatasetVersionBaseDto publishDatasetVersion(@DatasetVersionBaseDto datasetVersionDto) throws MetamacException;
    		"Program publication"
    		@DatasetVersionDto programPublicationDatasetVersion(@DatasetVersionDto datasetVersionDto, JAVADATE validFrom) throws MetamacException;
    		@DatasetVersionBaseDto programPublicationDatasetVersion(@DatasetVersionBaseDto datasetVersionDto, JAVADATE validFrom) throws MetamacException;
    		"Cancel a dataset version publication"
    		@DatasetVersionDto cancelPublicationDatasetVersion(@DatasetVersionDto datasetVersionDto) throws MetamacException;
    		@DatasetVersionBaseDto cancelPublicationDatasetVersion(@DatasetVersionBaseDto datasetVersionDto) throws MetamacException;
    		"Creates a new version of a dataset, copying metadata from version with provided urn"
    		@DatasetVersionDto versioningDatasetVersion(@DatasetVersionDto datasetVersionDto, @VersionTypeEnum versionType) throws MetamacException;
    		@DatasetVersionBaseDto versioningDatasetVersion(@DatasetVersionBaseDto datasetVersionDto, @VersionTypeEnum versionType) throws MetamacException;

    		//Data related actions
    		"Retrieve Dataset version dimensions ids"
    		List<String> retrieveDatasetVersionDimensionsIds(String datasetVersionUrn) throws MetamacException;
    		"Retrieve the coverage for a given dimension"
    		List<@CodeItemDto> retrieveCoverageForDatasetVersionDimension(String datasetVersionUrn, String dsdDimensionId) throws MetamacException;
    		List<@CodeItemDto> filterCoverageForDatasetVersionDimension(String datasetVersionUrn, String dsdDimensionId, String filter) throws MetamacException;
    		"Import a set of files provided by urn as datasources in a datasetVersion"
    		importDatasourcesInDatasetVersion(@DatasetVersionDto datasetVersionDto, List<URL> fileUrls, Map<String,String> dimensionRepresentationMapping) throws MetamacException;
    		importDatasourcesInStatisticalOperation(String statisticalOperationUrn, List<URL> fileUrls) throws MetamacException;
    		"Create an attribute instance"
    		@DsdAttributeInstanceDto createAttributeInstance(String datasetVersionUrn, @DsdAttributeInstanceDto dsdAttributeInstanceDto) throws MetamacException;
    		"Update an attribute instance"
    		@DsdAttributeInstanceDto updateAttributeInstance(String datasetVersionUrn, @DsdAttributeInstanceDto dsdAttributeInstanceDto) throws MetamacException;
    		"Delete an attribute instance"
    		deleteAttributeInstance(String datasetVersionUrn, String uuid) throws MetamacException;
    		"Retrieve attribute instances given the dataset version URN and the attribute Id"
    		List<@DsdAttributeInstanceDto> retrieveAttributeInstances(String datasetVersionUrn, String attributeId) throws MetamacException;

    		// Statistic officialities
    		List<@StatisticOfficialityDto> findStatisticOfficialities() throws MetamacException;

			// CATEGORISATIONS
    		"Creates categorisation"
    		@CategorisationDto createCategorisation(String datasetVersionUrn, @CategorisationDto categorisationDto) throws MetamacException;
    		"Retrieves categorisation by urn"
    		@CategorisationDto retrieveCategorisationByUrn(String urn) throws MetamacException;
    		"Deletes categorisation"
    		deleteCategorisation(String urn) throws MetamacException;
    		"Retrieves all categorisations by dataset"
    		List<@CategorisationDto> retrieveCategorisationsByDatasetVersion(String datasetVersionUrn) throws MetamacException;
    		"Ends the validity of a categorisation. ValidTo date is optional"
    		@CategorisationDto endCategorisationValidity(String urn, JAVADATE validTo) throws MetamacException;
			
    		// PUBLICATIONS
	   		"Find all publications"
	   		MetamacCriteriaResult<@RelatedResourceDto> findPublicationsByCondition(MetamacCriteria criteria) throws MetamacException; 

    		// PUBLICATION VERSION
	   		"Creates publication"
	   		@PublicationVersionDto createPublication(@PublicationVersionDto publicationVersionDto, @ExternalItemDto statisticalOperation) throws MetamacException;
	   		"Updates publication"
            @PublicationVersionDto updatePublicationVersion(@PublicationVersionDto publicationVersionDto) throws MetamacException;
            "Deletes publication"
            deletePublicationVersion(String urn) throws MetamacException;
            "Finds publications by criteria"
            MetamacCriteriaResult<@PublicationVersionBaseDto> findPublicationVersionByCondition(MetamacCriteria criteria) throws MetamacException;
            "Retrieves a publication by URN"
            @PublicationVersionDto retrievePublicationVersionByUrn(String urn) throws MetamacException;
            "Retrieves all publication versions"
            List<@PublicationVersionBaseDto> retrievePublicationVersions(String publicationVersionUrn) throws MetamacException;
    		"Retrieves publication version structure: chapter and cubes by levels."
	    	@PublicationStructureDto retrievePublicationVersionStructure(String publicationVersionUrn) throws MetamacException;
	    	"Retrieve latest publicationVersion providing publicationUrn"
    		@PublicationVersionDto retrieveLatestPublicationVersion(String publicationUrn) throws MetamacException;
    		"Retrieve latest published publicationVersion providing publicationUrn"
    		@PublicationVersionDto retrieveLatestPublishedPublicationVersion(String publicationUrn) throws MetamacException;
    		"Send to production validation"
    		@PublicationVersionDto sendPublicationVersionToProductionValidation(@PublicationVersionDto publicationVersionDto) throws MetamacException;
    		@PublicationVersionBaseDto sendPublicationVersionToProductionValidation(@PublicationVersionBaseDto publicationVersionDto) throws MetamacException;
    		"Send to diffusion validation"
    		@PublicationVersionDto sendPublicationVersionToDiffusionValidation(@PublicationVersionDto publicationVersionDto) throws MetamacException;
    		@PublicationVersionBaseDto sendPublicationVersionToDiffusionValidation(@PublicationVersionBaseDto publicationVersionDto) throws MetamacException;
    		"Send to validation rejected"
    		@PublicationVersionDto sendPublicationVersionToValidationRejected(@PublicationVersionDto publicationVersionDto) throws MetamacException;
    		@PublicationVersionBaseDto sendPublicationVersionToValidationRejected(@PublicationVersionBaseDto publicationVersionDto) throws MetamacException;
    		"Publishes a new version of a publication"
    		@PublicationVersionDto publishPublicationVersion(@PublicationVersionDto publicationVersionDto) throws MetamacException;
    		@PublicationVersionBaseDto publishPublicationVersion(@PublicationVersionBaseDto publicationVersionDto) throws MetamacException;
    		"Program publication"
    		@PublicationVersionDto programPublicationPublicationVersion(@PublicationVersionDto publicationVersionDto, JAVADATE validFrom) throws MetamacException;
    		@PublicationVersionBaseDto programPublicationPublicationVersion(@PublicationVersionBaseDto publicationVersionDto, JAVADATE validFrom) throws MetamacException;
    		"Cancel a publication version publication"
    		@PublicationVersionDto cancelPublicationPublicationVersion(@PublicationVersionDto publicationVersionDto) throws MetamacException;
    		@PublicationVersionBaseDto cancelPublicationPublicationVersion(@PublicationVersionBaseDto publicationVersionDto) throws MetamacException;
    		"Creates a new version of a publication, copying metadata from version with provided urn"
    		@PublicationVersionDto versioningPublicationVersion(@PublicationVersionDto publicationVersionDto, @VersionTypeEnum versionType) throws MetamacException;
    		@PublicationVersionBaseDto versioningPublicationVersion(@PublicationVersionBaseDto publicationVersionDto, @VersionTypeEnum versionType) throws MetamacException;

	    	// CHAPTERS
	    	"Creates a chapter"
	    	@ChapterDto createChapter(String publicationVersionUrn, @ChapterDto chapterDto) throws MetamacException;
	    	"Updates chapter metadata"
	    	@ChapterDto updateChapter(@ChapterDto chapterDto) throws MetamacException;
	    	"Updates chapter location"
	    	@ChapterDto updateChapterLocation(String chapterUrn, String parentTargetUrn, Long orderInLevel) throws MetamacException;
	    	"Retrieves chapter"
	    	@ChapterDto retrieveChapter(String chapterUrn) throws MetamacException;
	    	"Deletes chapter"
	    	deleteChapter(String chapterUrn) throws MetamacException;
	    	
	    	// CUBES
	    	"Creates a cube"
	    	@CubeDto createCube(String publicationVersionUrn, @CubeDto cubeDto) throws MetamacException;
	    	"Updates cube metadata"
	    	@CubeDto updateCube(@CubeDto cubeDto) throws MetamacException;
	    	"Updates cube location"
	    	@CubeDto updateCubeLocation(String cubeUrn, String parentTargetUrn, Long orderInLevel) throws MetamacException;
	    	"Retrieves cube"
	    	@CubeDto retrieveCube(String cubeUrn) throws MetamacException;
	    	"Deletes cube"
	    	deleteCube(String cubeUrn) throws MetamacException;
	    	
	    	// CONSTRAINTS
	    	"Find content constraints by constrained artefact"
	    	List<@ExternalItemDto> findContentConstraintsForArtefact(String artefactUrn) throws MetamacException;
	    	"Create content constraint"
    		@ContentConstraintBasicDto createContentConstraint(@ContentConstraintDto contentConstraint) throws MetamacException;
    		"Retrieves categorisation by urn"
    		@ContentConstraintDto retrieveContentConstraintByUrn(String urn) throws MetamacException;
    		"Deletes content constraint"
    		deleteContentConstraint(String urn) throws MetamacException;
    		
    		"Retrieve region with keies"
			@RegionValueDto retrieveRegionForContentConstraint(String contentConstraintUrn, String regionCode) throws MetamacException;
    		"Create or update a region"
    		@RegionValueDto saveRegionForContentConstraint(String contentConstraintUrn, @RegionValueDto regionValueDto) throws MetamacException;
    		"Remove region"
    		deleteRegion(String contentConstraintUrn, String regionCode) throws MetamacException;
		}
	}
}