import "classpath:/btdesign/metamac-core-common-dtos.btdesign"
import "classpath:/btdesign/metamac-core-common-enum.btdesign"

import "classpath:/btdesign/metamac-statistical-resources-core-base-dtos.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-base-enums.btdesign"

import "classpath:/btdesign/metamac-statistical-resources-core-queries.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-queries-dtos.btdesign"

import "classpath:/btdesign/metamac-statistical-resources-core-datasets.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-datasets-dtos.btdesign"

import "classpath:/btdesign/metamac-statistical-resources-core-publications.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-publications-dtos.btdesign"

Application FacadeStatisticalResources {
	basePackage=unused

	Module core_facades {
		basePackage=org.siemac.metamac.statistical.resources.core.facade

		// ----------------------------------------------------------------
		// 							FACADE SERVICES
		// ----------------------------------------------------------------  
		
		Service StatisticalResourcesServiceFacade {
			> @QueryService
			> @DatasetService
			> @PublicationService
			> @DatasetLifecycleService
			
			// QUERIES
			"Retrieves a query scheme by URN"
            @QueryDto retrieveQueryByUrn(String urn) throws MetamacException;
            "Retrieve queries"
            List<@QueryDto> retrieveQueries() throws MetamacException;
            "Create a query"
            @QueryDto createQuery(@QueryDto queryDto) throws MetamacException;
            "Update a query"
            @QueryDto updateQuery(@QueryDto queryDto) throws MetamacException;
            "Find queries by criteria"
    		MetamacCriteriaResult<@QueryDto> findQueriesByCondition(MetamacCriteria criteria)  throws MetamacException;
    		"Mark query as discontinued because the data is not going to be updated"
            @QueryDto markQueryAsDiscontinued(@QueryDto queryDto) throws MetamacException;
            "Delete query"
            deleteQuery(String urn) throws MetamacException;
    		 			
			// DATASOURCES
			"Creates a datasource"
	    	@DatasourceDto createDatasource(String urnDatasetVersion, @DatasourceDto datasourceDto) throws MetamacException;
	    	"Updates metadata of datasource"
	    	@DatasourceDto updateDatasource(@DatasourceDto datasourceDto) throws MetamacException;
	    	"Retrieves datasource"
	    	@DatasourceDto retrieveDatasourceByUrn(String urn) throws MetamacException;
	    	"Deletes datasource"
	    	deleteDatasource(String urn) throws MetamacException;
	    	"Retrieves all datasources of a dataset version"
	    	List<@DatasourceDto> retrieveDatasourcesByDatasetVersion(String urnDatasetVersion) throws MetamacException;
	    	
	    	// DATASETS & DATASET VERSION
	   		"Creates dataset"
	   		@DatasetDto createDataset(@DatasetDto datasetDto, @ExternalItemDto statisticalOperation) throws MetamacException;
	   		"Updates dataset"
            @DatasetDto updateDataset(@DatasetDto datasetDto) throws MetamacException;
            "Deletes dataset"
            deleteDataset(String urn) throws MetamacException;
            "Finds datasets by criteria"
            MetamacCriteriaResult<@DatasetDto> findDatasetsByCondition(MetamacCriteria criteria) throws MetamacException;
            "Retrieves a dataset by URN"
            @DatasetDto retrieveDatasetByUrn(String urn) throws MetamacException;
            "Retrieves all dataset versions"
            List<@DatasetDto> retrieveDatasetVersions(String urn) throws MetamacException;
    		"Creates a new version of a dataset, copying metadata from version with provided urn"
    		@DatasetDto versioningDataset(String urnToCopy, @VersionTypeEnum versionType) throws MetamacException;
    		"Send to production validation"
    		@DatasetDto sendToProductionValidation(@DatasetDto datasetDto) throws MetamacException;
    		"Send to diffusion validation"
    		@DatasetDto sendToDiffusionValidation(@DatasetDto datasetDto) throws MetamacException;
    		
    		// PUBLICATIONS & PUBLICATION VERSION
	   		"Creates publication"
	   		@PublicationDto createPublication(@PublicationDto publicationDto, @ExternalItemDto statisticalOperation) throws MetamacException;
	   		"Updates publication"
            @PublicationDto updatePublication(@PublicationDto publicationDto) throws MetamacException;
            "Deletes publication"
            deletePublication(String urn) throws MetamacException;
            "Finds publications by criteria"
            MetamacCriteriaResult<@PublicationDto> findPublicationByCondition(MetamacCriteria criteria) throws MetamacException;
            "Retrieves a publication by URN"
            @PublicationDto retrievePublicationByUrn(String urn) throws MetamacException;
            "Retrieves all publication versions"
            List<@PublicationDto> retrievePublicationVersions(String urn) throws MetamacException;
    		"Creates a new version of a publication, copying metadata from version with provided urn"
    		@PublicationDto versioningPublication(String urnToCopy, @VersionTypeEnum versionType) throws MetamacException;
    		
    		// TODO: Pendiente de eliminar cuando la jerarquia este bien hecha
    		List<String> findDatasetVersionForPublicationVersion(String publicationVersionUrn) throws MetamacException;
    		List<String> addDatasetVersionToPublicationVersion(String publicationVersionUrn, String datasetVersionUrn) throws MetamacException;
       		List<String> removeDatasetVersionToPublicationVersion(String publicationVersionUrn, String datasetVersionUrn) throws MetamacException;
		}  
	}
}