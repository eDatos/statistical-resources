import "classpath:/btdesign/metamac-core-common-dtos.btdesign"
import "classpath:/btdesign/metamac-core-common-enum.btdesign"

import "classpath:/btdesign/metamac-statistical-resources-core-base-dtos.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-base-enums.btdesign"

import "classpath:/btdesign/metamac-statistical-resources-core-queries.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-queries-dtos.btdesign"

import "classpath:/btdesign/metamac-statistical-resources-core-datasets.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-datasets-dtos.btdesign"

import "classpath:/btdesign/metamac-statistical-resources-core-publications.btdesign"
import "classpath:/btdesign/metamac-statistical-resources-core-publications-dtos.btdesign"

Application FacadeStatisticalResources {
	basePackage=unused

	Module core_facades {
		basePackage=org.siemac.metamac.statistical.resources.core.facade

		// ----------------------------------------------------------------
		// 							FACADE SERVICES
		// ----------------------------------------------------------------  
		
		Service StatisticalResourcesServiceFacade {
			> @QueryService
			> @DatasetService
			> @PublicationService
			> @DatasetLifecycleService
			> @PublicationLifecycleService
			
			// QUERIES
			"Retrieves a query scheme by URN"
            @QueryVersionDto retrieveQueryVersionByUrn(String urn) throws MetamacException;
            "Retrieve queries"
            List<@QueryVersionDto> retrieveQueriesVersions() throws MetamacException;
            "Create a query"
            @QueryVersionDto createQuery(@QueryVersionDto queryVersionDto) throws MetamacException;
            "Update a query"
            @QueryVersionDto updateQueryVersion(@QueryVersionDto queryVersionDto) throws MetamacException;
            "Find queries by criteria"
    		MetamacCriteriaResult<@QueryVersionDto> findQueriesVersionsByCondition(MetamacCriteria criteria)  throws MetamacException;
    		"Mark query as discontinued because the data is not going to be updated"
            @QueryVersionDto markQueryVersionAsDiscontinued(@QueryVersionDto queryVersionDto) throws MetamacException;
            "Delete query"
            deleteQueryVersion(String urn) throws MetamacException;
            "Retrieve latest queryVersion providing queryUrn"
    		@QueryVersionDto retrieveLatestQueryVersion(String queryUrn) throws MetamacException;
    		"Retrieve latest published queryVersion providing queryUrn"
    		@QueryVersionDto retrieveLatestPublishedQueryVersion(String queryUrn) throws MetamacException
    		 			
			// DATASOURCES
			"Creates a datasource"
	    	@DatasourceDto createDatasource(String urnDatasetVersion, @DatasourceDto datasourceDto) throws MetamacException;
	    	"Updates metadata of datasource"
	    	@DatasourceDto updateDatasource(@DatasourceDto datasourceDto) throws MetamacException;
	    	"Retrieves datasource"
	    	@DatasourceDto retrieveDatasourceByUrn(String urn) throws MetamacException;
	    	"Deletes datasource"
	    	deleteDatasource(String urn) throws MetamacException;
	    	"Retrieves all datasources of a dataset version"
	    	List<@DatasourceDto> retrieveDatasourcesByDatasetVersion(String urnDatasetVersion) throws MetamacException;
	    	
	    	// DATASETS 
	   		"Find all datasets"
	   		MetamacCriteriaResult<@DatasetDto> findDatasetsByCondition(MetamacCriteria criteria) throws MetamacException; 
	    	
	    	// DATASET VERSION
	    	"Creates dataset"
	   		@DatasetVersionDto createDataset(@DatasetVersionDto datasetVersionDto, @ExternalItemDto statisticalOperation) throws MetamacException;
	   		"Updates dataset"
            @DatasetVersionDto updateDatasetVersion(@DatasetVersionDto datasetVersionDto) throws MetamacException;
            "Deletes dataset"
            deleteDatasetVersion(String urn) throws MetamacException;
            "Finds datasets by criteria"
            MetamacCriteriaResult<@DatasetVersionDto> findDatasetsVersionsByCondition(MetamacCriteria criteria) throws MetamacException;
            "Retrieves a dataset by URN"
            @DatasetVersionDto retrieveDatasetVersionByUrn(String urn) throws MetamacException;
            "Retrieves all dataset versions"
            List<@DatasetVersionDto> retrieveDatasetVersions(String datasetVersionUrn) throws MetamacException;
    		"Creates a new version of a dataset, copying metadata from version with provided urn"
    		@DatasetVersionDto versioningDatasetVersion(String urnDatasetVersionToCopy, @VersionTypeEnum versionType) throws MetamacException;
    		"Send to production validation"
    		@DatasetVersionDto sendDatasetVersionToProductionValidation(@DatasetVersionDto datasetVersionDto) throws MetamacException;
    		"Send to diffusion validation"
    		@DatasetVersionDto sendDatasetVersionToDiffusionValidation(@DatasetVersionDto datasetVersionDto) throws MetamacException;
    		"Retrieve latest datasetVersion providing datasetUrn"
    		@DatasetVersionDto retrieveLatestDatasetVersion(String datasetUrn) throws MetamacException;
    		"Retrieve latest published datasetVersion providing datasetUrn"
    		@DatasetVersionDto retrieveLatestPublishedDatasetVersion(String datasetUrn) throws MetamacException;
    		
    		//Data related actions
    		"Retrieve Dataset version dimensions ids"
    		List<String> retrieveDatasetVersionDimensionsIds(String datasetVersionUrn) throws MetamacException;
    		"Retrieve the coverage for a given dimension"
    		List<@CodeItemDto> retrieveCoverageForDatasetVersionDimension(String datasetVersionUrn, String dsdDimensionId) throws MetamacException;
    		
    		// PUBLICATIONS & PUBLICATION VERSION
	   		"Creates publication"
	   		@PublicationVersionDto createPublication(@PublicationVersionDto publicationVersionDto, @ExternalItemDto statisticalOperation) throws MetamacException;
	   		"Updates publication"
            @PublicationVersionDto updatePublicationVersion(@PublicationVersionDto publicationVersionDto) throws MetamacException;
            "Deletes publication"
            deletePublicationVersion(String urn) throws MetamacException;
            "Finds publications by criteria"
            MetamacCriteriaResult<@PublicationVersionDto> findPublicationVersionByCondition(MetamacCriteria criteria) throws MetamacException;
            "Retrieves a publication by URN"
            @PublicationVersionDto retrievePublicationVersionByUrn(String urn) throws MetamacException;
            "Retrieves all publication versions"
            List<@PublicationVersionDto> retrievePublicationVersions(String publicationVersionUrn) throws MetamacException;
    		"Creates a new version of a publication, copying metadata from version with provided urn"
    		@PublicationVersionDto versioningPublicationVersion(String publicationVersionUrnToCopy, @VersionTypeEnum versionType) throws MetamacException;
    		"Retrieves publication version structure: chapter and cubes by levels."
	    	@PublicationStructureDto retrievePublicationVersionStructure(String publicationVersionUrn) throws MetamacException;
	    	"Retrieve latest publicationVersion providing publicationUrn"
    		@PublicationVersionDto retrieveLatestPublicationVersion(String publicationUrn) throws MetamacException;
    		"Retrieve latest published publicationVersion providing publicationUrn"
    		@PublicationVersionDto retrieveLatestPublishedPublicationVersion(String publicationUrn) throws MetamacException;
    		"Send to production validation"
    		@PublicationVersionDto sendPublicationVersionToProductionValidation(@PublicationVersionDto publicationVersionDto) throws MetamacException;
    		"Send to diffusion validation"
    		@PublicationVersionDto sendPublicationVersionToDiffusionValidation(@PublicationVersionDto publicationVersionDto) throws MetamacException;
    		"Send to validation rejected"
    		@PublicationVersionDto sendPublicationVersionToValidationRejected(@PublicationVersionDto publicationVersionDto) throws MetamacException;
	    	
	    	// CHAPTERS
	    	"Creates a chapter"
	    	@ChapterDto createChapter(String publicationVersionUrn, @ChapterDto chapterDto) throws MetamacException;
	    	"Updates chapter metadata"
	    	@ChapterDto updateChapter(@ChapterDto chapterDto) throws MetamacException;
	    	"Updates chapter location"
	    	@ChapterDto updateChapterLocation(String chapterUrn, String parentTargetUrn, Long orderInLevel) throws MetamacException;
	    	"Retrieves chapter"
	    	@ChapterDto retrieveChapter(String chapterUrn) throws MetamacException;
	    	"Deletes chapter"
	    	deleteChapter(String chapterUrn) throws MetamacException;
	    	
	    	// CUBES
	    	"Creates a cube"
	    	@CubeDto createCube(String publicationVersionUrn, @CubeDto cubeDto) throws MetamacException;
	    	"Updates cube metadata"
	    	@CubeDto updateCube(@CubeDto cubeDto) throws MetamacException;
	    	"Updates cube location"
	    	@CubeDto updateCubeLocation(String cubeUrn, String parentTargetUrn, Long orderInLevel) throws MetamacException;
	    	"Retrieves cube"
	    	@CubeDto retrieveCube(String cubeUrn) throws MetamacException;
	    	"Deletes cube"
	    	deleteCube(String cubeUrn) throws MetamacException;
		}  
	}
}